// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model CourseEnrollment {
  id       Int    @id @default(autoincrement())
  userId   Int
  courseId Int
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Area {
  id     Int      @id @default(autoincrement())
  area   String   @unique
  course Course[]
}

model Course {
  id          Int                @id @default(autoincrement())
  title       String
  description String
  owner       User               @relation(fields: [ownerId], references: [id])
  ownerId     Int
  owner_name  String
  section     String
  subject     String
  verified    Boolean            @default(false)
  area        Area               @relation(fields: [areaId], references: [id])
  areaId      Int
  users       CourseEnrollment[]
  token       String             @unique
  activities  Activities[]
  Post        Post[]
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String @unique
  users User[]
}

model Gender {
  id     Int    @id @default(autoincrement())
  gender String @unique
  users  User[]
}

model User {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  password        String
  create_date     DateTime           @default(now())
  user_name       String             @unique
  gender          Gender             @relation(fields: [genderId], references: [id])
  genderId        Int
  name            String
  last_name       String
  phone           String
  courses         CourseEnrollment[]
  course_owner    Course[]
  activities_sent ActivitiesSent[]
  QuizzSent       QuizzSent[]
  Post            Post[]
  Role            Role               @relation(fields: [roleId], references: [id])
  roleId          Int
}

model Activities {
  id              Int              @id @default(autoincrement())
  course          Course           @relation(fields: [course_id], references: [id])
  course_id       Int
  title           String
  description     String
  grade           Decimal
  start_date      String
  end_date        String
  email           String
  digital         Boolean          @default(true)
  status          Status           @relation(fields: [status_id], references: [id])
  status_id       Int
  activities_send ActivitiesSent[]
  quizz           Quizz[]
  Post            Post?
}

model ActivitiesSent {
  id          Int        @id @default(autoincrement())
  activity    Activities @relation(fields: [activity_id], references: [id])
  activity_id Int
  document    String?    @default("")
  user        User       @relation(fields: [user_id], references: [id])
  user_id     Int
  grade       Decimal    @default(0)
  create_date DateTime   @default(now())
}

model Quizz {
  id          Int         @id @default(autoincrement())
  activity    Activities  @relation(fields: [activity_id], references: [id])
  activity_id Int
  question    Questions[]
  sent        QuizzSent[]
}

model Questions {
  id      Int      @id @default(autoincrement())
  Quizz   Quizz?   @relation(fields: [quizzId], references: [id])
  quizzId Int?
  text    String
  options Option[]
  answer  Int
}

model Option {
  id         Int       @id @default(autoincrement())
  text       String
  question   Questions @relation(fields: [questionId], references: [id])
  questionId Int
  Answer     Answer[]
}

model QuizzSent {
  id          Int      @id @default(autoincrement())
  quizz       Quizz    @relation(fields: [quizzId], references: [id])
  quizzId     Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  grade       Decimal  @default(0)
  create_date DateTime @default(now())
  answer      Answer[]
}

model Answer {
  id          Int       @id @default(autoincrement())
  QuizzSent   QuizzSent @relation(fields: [quizzSentId], references: [id])
  quizzSentId Int
  option      Option    @relation(fields: [optionId], references: [id])
  optionId    Int
}

model Status {
  id         Int          @id @default(autoincrement())
  status     String       @unique
  activities Activities[]
}

model Post {
  id         Int         @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime    @default(now())
  course     Course      @relation(fields: [courseId], references: [id])
  courseId   Int
  activity   Activities? @relation(fields: [activityId], references: [id])
  activityId Int?        @unique // Clave for√°nea opcional, permite que algunos posts no tengan actividad asociada
  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model CourseEnrollment {
  id       Int    @id @default(autoincrement())
  userId   Int
  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model Area {
  id     Int      @id @default(autoincrement())
  area   String   @unique
  course Course[]
}

model Course {
  id          Int                @id @default(autoincrement())
  title       String
  description String
  ownerId     Int
  owner_name  String
  section     String
  subject     String
  areaId      Int
  token       String             @unique
  verified    Boolean            @default(false)
  activities  Activities[]
  ChatRoom    ChatRoom[]
  area        Area               @relation(fields: [areaId], references: [id])
  owner       User               @relation(fields: [ownerId], references: [id])
  users       CourseEnrollment[]
  Post        Post[]
}

model Role {
  id           Int            @id @default(autoincrement())
  role         String         @unique
  ChatRoomUser ChatRoomUser[]
  users        User[]
}

model Gender {
  id     Int    @id @default(autoincrement())
  gender String @unique
  users  User[]
}

model User {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  password        String
  create_date     DateTime           @default(now())
  user_name       String             @unique
  genderId        Int
  name            String
  last_name       String
  phone           String
  roleId          Int
  firebaseToken   String?
  activities_sent ActivitiesSent[]
  BlockedUser     BlockedUser[]      @relation("blockedUser")
  BlockedBy       BlockedUser[]      @relation("blockedBy")
  ChatRoomUser    ChatRoomUser[]
  course_owner    Course[]
  courses         CourseEnrollment[]
  Message         Message[]
  Post            Post[]
  QuizzSent       QuizzSent[]
  gender          Gender             @relation(fields: [genderId], references: [id])
  Role            Role               @relation(fields: [roleId], references: [id])
  UserStatus      UserStatus[]
}

model Activities {
  id              Int              @id @default(autoincrement())
  course_id       Int
  title           String
  description     String
  grade           Decimal
  start_date      String
  end_date        String
  email           String
  digital         Boolean          @default(true)
  status_id       Int
  isQuizz         Boolean          @default(false)
  course          Course           @relation(fields: [course_id], references: [id], onDelete: Cascade)
  status          Status           @relation(fields: [status_id], references: [id])
  activities_send ActivitiesSent[]
  Post            Post?
  quizz           Quizz[]
  Post            Post?
  ponderacion   Decimal          @default(0.0) // Directly storing the weight

}




model ActivitiesSent {
  id          Int        @id @default(autoincrement())
  activity_id Int
  user_id     Int
  create_date DateTime   @default(now())
  document    String?    @default("")
  grade       Decimal    @default(0)
  message     String?
  activity    Activities @relation(fields: [activity_id], references: [id])
  user        User       @relation(fields: [user_id], references: [id])
}





model Quizz {
  id          Int         @id @default(autoincrement())
  activity_id Int
  question    Questions[]
  activity    Activities  @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  sent        QuizzSent[]
}

model Questions {
  id      Int      @id @default(autoincrement())
  quizzId Int?
  text    String
  answer  Int
  options Option[]
  Quizz   Quizz?   @relation(fields: [quizzId], references: [id], onDelete: Cascade)
}

model Option {
  id         Int       @id @default(autoincrement())
  text       String
  questionId Int
  Answer     Answer[]
}


model QuizzSent {
  id          Int      @id @default(autoincrement())
  quizzId     Int
  userId      Int
  create_date DateTime @default(now())
  grade       Decimal  @default(0)
  answer      Answer[]
  quizz       Quizz    @relation(fields: [quizzId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

model Answer {
  id          Int       @id @default(autoincrement())
  quizzSentId Int
  optionId    Int
  option      Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId    Int
}










model Status {
  id         Int          @id @default(autoincrement())
  status     String       @unique
  activities Activities[]
}


model Post {
  id         Int         @id @default(autoincrement())
  title      String      @default("")
  content    String      @default("")
  createdAt  DateTime    @default(now())
  courseId   Int
  activityId Int?        @unique
  authorId   Int
  file       String      @default("")
  activity   Activities? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int
}

model ChatRoom {
  id        Int            @id @default(autoincrement())
  name      String?
  isGroup   Boolean        @default(false)
  createdAt DateTime       @default(now())
  courseId  Int?
  course    Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  users     ChatRoomUser[]
  messages  Message[]
}

model ChatRoomUser {
  id         Int      @id @default(autoincrement())
  userId     Int
  chatRoomId Int
  roleId     Int
  isActive   Boolean  @default(true)
  lastSeen   DateTime @default(now())
  isTyping   Boolean  @default(false)
  isBlocked  Boolean  @default(false)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Message {
  id          Int         @id @default(autoincrement())
  content     String?
  senderId    Int
  chatRoomId  Int
  sentAt      DateTime    @default(now())
  isRead      Boolean     @default(false)
  messageType MessageType @default(TEXT)
  fileUrl     String?
  chatRoom    ChatRoom    @relation(fields: [chatRoomId], references: [id])
  sender      User        @relation(fields: [senderId], references: [id])
}

model UserStatus {
  id         Int      @id @default(autoincrement())
  userId     Int
  isOnline   Boolean  @default(false)
  lastActive DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model BlockedUser {
  id        Int      @id @default(autoincrement())
  blockerId Int
  blockedId Int
  blockedAt DateTime @default(now())
  blocked   User     @relation("blockedUser", fields: [blockedId], references: [id])
  blocker   User     @relation("blockedBy", fields: [blockerId], references: [id])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}
